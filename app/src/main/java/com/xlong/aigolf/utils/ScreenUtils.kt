package com.xlong.aigolf.utils

import android.R
import android.app.Activity
import android.content.Context
import android.graphics.Point
import android.os.Build
import android.view.Display
import android.view.View
import android.view.WindowManager
import androidx.core.content.ContextCompat
import com.xlong.aigolf.GlobalApplication
import java.lang.reflect.InvocationTargetException
import java.lang.reflect.Method

/**
 *
 * Create by xlong 2022/11/25
 */
object ScreenUtils {

    // 状态栏高度
    fun getStatusBarHeight(context: Context): Int {
        var result = 0
        val resourceId = context.resources.getIdentifier("status_bar_height", "dimen", "android")
        if (resourceId > 0) {
            result = context.resources.getDimensionPixelSize(resourceId)
        }
        return result
    }

    fun getFullScreenHeight(): Int {
        var height = 0
        val point = Point()
        val display = (GlobalApplication.appContext.getSystemService(Context.WINDOW_SERVICE) as WindowManager).defaultDisplay
        var mGetRawH: Method? = null
        try {
            // For JellyBean 4.2 (API 17) and onward
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
                display.getRealSize(point)
                height = point.y
            } else {
                mGetRawH = Display::class.java.getMethod("getRawHeight")
                try {
                    height = mGetRawH.invoke(display) as Int
                } catch (e: IllegalArgumentException) {
                    // TODO Auto-generated catch block
                    e.printStackTrace()
                } catch (e: IllegalAccessException) {
                    // TODO Auto-generated catch block
                    e.printStackTrace()
                } catch (e: InvocationTargetException) {
                    // TODO Auto-generated catch block
                    e.printStackTrace()
                }
            }
        } catch (e3: NoSuchMethodException) {
            e3.printStackTrace()
        }
        return height
    }

    fun getFullScreenWidth(): Int {
        var width = 0
        val point = Point()
        val display = (GlobalApplication.appContext.getSystemService(Context.WINDOW_SERVICE) as WindowManager).defaultDisplay
        var mGetRawW: Method? = null
        try {
            // For JellyBean 4.2 (API 17) and onward
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
                display.getRealSize(point)
                width = point.x
            } else {
                mGetRawW = Display::class.java.getMethod("getRawWidth")
                try {
                    width = mGetRawW.invoke(display) as Int
                } catch (e: java.lang.IllegalArgumentException) {
                    // TODO Auto-generated catch block
                    e.printStackTrace()
                } catch (e: IllegalAccessException) {
                    // TODO Auto-generated catch block
                    e.printStackTrace()
                } catch (e: InvocationTargetException) {
                    // TODO Auto-generated catch block
                    e.printStackTrace()
                }
            }
        } catch (e3: NoSuchMethodException) {
            e3.printStackTrace()
        }
        return width
    }

    /**
     * setStatusBarColor for 5.0 or higher
     *
     * @param activity
     * @param id       The desired resource identifier, as generated by the aapt
     * tool. This integer encodes the package, type, and resource
     * entry. The value 0 is an invalid identifier.
     */
    fun setStatusBarColor(activity: Activity, id: Int) {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
            val window = activity.window
            val color = ContextCompat.getColor(activity, id)
            if (window.statusBarColor == color) {
                return
            }
            //根据颜色设置深色浅色系(只去除了黑色时的情况，原则上要排除所有的深色底色)
//            if (DeviceUtils.isVersionMoreM()) {
//                if (id != R.color.black && id != R.color.black && id != R.color.c_2D2828 && id != R.color.c_ff9800) {
//                    window.decorView.systemUiVisibility = View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR
//                    StatusBarUtil.INSTANCE.MIUISetStatusBarLightMode(activity, true)
//                } else {
//                    window.decorView.systemUiVisibility = View.SYSTEM_UI_FLAG_VISIBLE
//                    StatusBarUtil.INSTANCE.MIUISetStatusBarLightMode(activity, false)
//                }
//            }
            //取消状态栏透明
            window.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS)
            //添加Flag把状态栏设为可绘制模式
            window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS)
            //设置状态栏颜色
            window.statusBarColor = color
        }
    }
}